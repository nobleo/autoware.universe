<?xml version="1.0"?>
<launch>
  <!-- Input pointcloud topic_name list as a string_array.
     To subscribe multiple topics, write as:
     "['/points_raw0', '/points_raw1', '/points_raw2', ...]"
     This syntax is also available from command line -->
  <arg name="input_points_raw_list" default="['/points_raw']" description="define as string_array"/>
  <arg name="output_points_raw" default="/points_raw/cropbox/filtered" description=""/>
  <arg name="tf_output_frame" default="base_link" description=""/>
  <arg name="separate_concatenate_node_and_time_sync_node" default="false" description=""/>

      <node_container pkg="rclcpp_components" exec="component_container" name="pointcloud_preprocessor_container" namespace="pointcloud_preprocessor">
        <!-- Conditional: Check if concatenate and time sync nodes should be separated -->
            <composable_node  unless="$(var separate_concatenate_node_and_time_sync_node)" pkg="autoware_pointcloud_preprocessor" plugin="autoware::pointcloud_preprocessor::PointCloudConcatenateDataSynchronizerComponent" name="sync_and_concatenate_filter" namespace="">
                <remap from="~/input/twist" to="/sensing/vehicle_velocity_converter/twist_with_covariance" />
                <remap from="output" to="/points_raw/concatenated" />
                <param name="input_topics" value="$(var input_points_raw_list)" />
                <param name="output_frame" value="$(var tf_output_frame)" />
                <param name="approximate_sync" value="true" />
                <param name="publish_synchronized_pointcloud" value="false" />
                <param name="input_twist_topic_type" value="twist" />
            </composable_node>

        <!-- Separate components for time sync and concatenation -->
        <composable_node if="$(var separate_concatenate_node_and_time_sync_node)" pkg="autoware_pointcloud_preprocessor" plugin="autoware::pointcloud_preprocessor::PointCloudDataSynchronizerComponent" name="synchronizer_filter" namespace="">
            <remap from="~/input/twist" to="/sensing/vehicle_velocity_converter/twist_with_covariance" />
            <remap from="output" to="/points_raw/concatenated" />
            <param name="input_topics" value="$(var input_points_raw_list)" />
            <param name="output_frame" value="$(var tf_output_frame)" />
            <param name="approximate_sync" value="true" />
        </composable_node>
        <composable_node if="$(var separate_concatenate_node_and_time_sync_node)" pkg="autoware_pointcloud_preprocessor" plugin="autoware::pointcloud_preprocessor::PointCloudConcatenationComponent" name="concatenate_filter" namespace="">
            <remap from="output" to="/points_raw/concatenated" />
            <param name="input_topics" value="$(var input_points_raw_list)" />
            <param name="output_frame" value="$(var tf_output_frame)" />
            <param name="approximate_sync" value="true" />
        </composable_node>

        <!-- CropBox filter component -->
        <composable_node pkg="autoware_pointcloud_preprocessor" plugin="autoware::pointcloud_preprocessor::CropBoxFilterComponent" name="crop_box_filter" namespace="">
            <remap from="input" to="/points_raw/concatenated" />
            <remap from="output" to="$(var output_points_raw)" />
            <param name="input_frame" value="$(var tf_output_frame)" />
            <param name="output_frame" value="$(var tf_output_frame)" />
            <param name="min_x" value="-200" />
            <param name="max_x" value="1000.0" />
            <param name="min_y" value="-50" />
            <param name="max_y" value="50" />
            <param name="min_z" value="-2.0" />
            <param name="max_z" value="3" />
            <param name="negative" value="false" />
        </composable_node>
    </node_container>
    
</launch>
